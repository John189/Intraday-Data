#region Using declarations
using System;
using System.Globalization;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion


//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies
{
	public class UpdateDownload : Strategy
	{
	    private string filePath;
		private LudwigLevels500 ludwigLevels500;
		private DateTime lastRecordedTime;

	    protected override void OnStateChange()
	    {
	        if (State == State.SetDefaults)
	        {
	            Description = @"My strategy for exporting OHLCV and updating the file as per chart updates.";
	            Name = "UpdateDownload";
	        }
	        else if (State == State.Configure)
	        {
	            // Set the file path for the CSV file
	            filePath = "C:\\filepath\\" + "OHLCV.csv";
				
				// Initialize lastRecordedTime
            	lastRecordedTime = DateTime.MinValue;
				
				if (File.Exists(filePath))
	            {
	                // Read the last line of the file
	                string lastLine = File.ReadLines(filePath).LastOrDefault();
	                if (!string.IsNullOrEmpty(lastLine))
	                {
	                    string[] parts = lastLine.Split(',');
	                    DateTime lastTime;
						if (parts.Length > 0 && DateTime.TryParse(parts[0], out lastTime))
	                    {
	                        lastRecordedTime = lastTime;
	                    }
	                }
	            }
	        }
	    }

	    protected override void OnBarUpdate()
		{
		   // Check if the file exists; if not, create it and write the header
		    if (!File.Exists(filePath))
		    {
		        using (StreamWriter sw = File.CreateText(filePath))
		        {
		            sw.WriteLine("datetime,open,high,low,close,volume");
		        }
		    }
			
			DateTime barTime = Time[0];
	        if (barTime <= lastRecordedTime)
	        {
	            return; // Skip if the data is already recorded
	        }
			
			string formattedDateTime = barTime.ToString("yyyy-MM-dd HH:mm:ss");
			
		    using (StreamWriter sw = File.AppendText(filePath))
	        {
	            string line = String.Format(CultureInfo.InvariantCulture,
	                "{0},{1},{2},{3},{4},{5}",
	                formattedDateTime, Open[0], High[0], Low[0], Close[0], Volume[0]);

	            sw.WriteLine(line);
	        }

	        lastRecordedTime = barTime; // Update the last recorded time
	    }
	}
}
